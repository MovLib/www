#!/usr/bin/php -q
<?php

/**
 * Main console application for adminsitrative tasks.
 *
 * The console application is used to run several administrative tasks. The MovLib software does not have any
 * administrative backend, instead all such tasks are handled with console applications.
 *
 * <strong>Note!</strong> To access MovDep globally create a symbolic link to this file in your local bin path, example:
 * <pre>$ sudo ln -s MovDep.phpcli /usr/local/bin/MovDep && chmod 755 MovDep.phpcli</pre>
 *
 * @author Richard Fussenegger <richard@fussenegger.info>
 * @copyright (c) 2013â€“present, MovLib
 * @license http://www.gnu.org/licenses/agpl.html AGPL-3.0
 * @link http://movlib.org/ movlib.org
 * @since 0.0.1
 */

/**
 * Delete all directories and files within this directory.
 *
 * The behaviour of this function is equivalent to the <code>rm -rf</code> Linux command.
 *
 * @param string $directory
 *   Absolute or relative path to directory.
 * @return void
 * @since 0.0.1
 */
function unlink_recursive($directory) {
  foreach (new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($directory, \FilesystemIterator::SKIP_DOTS), \RecursiveIteratorIterator::CHILD_FIRST) as $path) {
    $path->isFile() ? unlink($path->getPathname()) : rmdir($path->getPathname());
  }
  rmdir($directory);
}

/** Inclusion path, default to <code>/var/www</code> on the official MovLib servers. */
define('IP', dirname(dirname(dirname(__DIR__))) . DIRECTORY_SEPARATOR);

/** The composer generated autoload file is required for automatic loading of the Symfony classes. */
require IP . 'vendor' . DIRECTORY_SEPARATOR . 'autoload.php';

$app = new Symfony\Component\Console\Application('MovDep', '0.0.1');

// Add all available commands to our application.
foreach (glob(IP . 'MovLib' . DIRECTORY_SEPARATOR . 'Console' . DIRECTORY_SEPARATOR . 'Command' . DIRECTORY_SEPARATOR . '*.inc') as $class) {
  /** Include the command in our application. */
  require $class;

  // Build up fully qualified class string for instantiation.
  $class = 'MovLib\\Console\\Command\\' . basename($class, '.inc');

  // Check if we just included an abstract class. If we did, good, but do not try to instantiate it.
  if ((new ReflectionClass($class))->isAbstract()) {
    continue;
  }

  // If it is an actual class, instantiate it.
  $app->add(new $class());
}

$app->run();
