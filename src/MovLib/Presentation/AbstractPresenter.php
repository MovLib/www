<?php

/*!
 * This file is part of {@link https://github.com/MovLib MovLib}.
 *
 * Copyright © 2013-present {@link https://movlib.org/ MovLib}.
 *
 * MovLib is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * MovLib is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with MovLib.
 * If not, see {@link http://www.gnu.org/licenses/ gnu.org/licenses}.
 */
namespace MovLib\Presentation;

use \MovLib\Data\Collator;
use \MovLib\Partial\Alert;
use \MovLib\Partial\Navigation;

/**
 * Default page class with no content.
 *
 * @author Richard Fussenegger <richard@fussenegger.info>
 * @copyright © 2013 MovLib
 * @license http://www.gnu.org/licenses/agpl.html AGPL-3.0
 * @link https://movlib.org/
 * @since 0.0.1-dev
 */
abstract class AbstractPresenter {


  // ------------------------------------------------------------------------------------------------------------------- Properties


  /**
   * Contains all alert messages of the current page.
   *
   * @var string
   */
  public $alerts;

  /**
   * Contains the CSS classes of the body element.
   *
   * @var string
   */
  protected $bodyClasses;

  /**
   * The presentation's breadcrumb navigation.
   *
   * @var \MovLib\Presentation\Partial\Navigation
   */
  protected $breadcrumb;

  /**
   * The title used for the current page in the breadcrumb, defaults to the current title if not given.
   *
   * @var string
   */
  protected $breadcrumbTitle;

  /**
   * Active global config instance.
   *
   * @var \MovLib\Core\Config
   */
  protected $config;

  /**
   * HTML that should be included after the page's content.
   *
   * @var string
   */
  protected $contentAfter;

  /**
   * HTML that should be included before the page's content.
   *
   * @var string
   */
  protected $contentBefore;

  /**
   * The active dependency injection container.
   *
   * @var \MovLib\Core\HTTP\DIContainerHTTP
   */
  protected $diContainerHTTP;

  /**
   * Active file system instance.
   *
   * @var \MovLib\Core\FileSystem
   */
  protected $fs;

  /**
   * Additional elements for the <code><head></code> element.
   *
   * @var string
   */
  protected $headElements;

  /**
   * HTML that should be included after the page's heading.
   *
   * @var string
   */
  protected $headingAfter;

  /**
   * HTML that should be included before the page's heading.
   *
   * @var string
   */
  protected $headingBefore;

  /**
   * The itemprop value for the page's heading.
   *
   * @var string
   */
  protected $headingSchemaProperty;

  /**
   * The page's unique ID.
   *
   * In order to identify a page in HTML, CSS, and JavaScript we have to use unique IDs. The unique ID of a page is
   * automatically generated from it's namespace and set after calling the <code>AbstractPage::init()</code>-method. The
   * unique page's ID is generated by removing the common part from the namespace (specifically the
   * <code>"MovLib\Presentation\"</code> string), replacing all backslashes with dashes, and finally lower-casing the
   * complete string. The unique ID for this page that would be generated with this class (if it wouldn't be abstract)
   * would be <code>"abstractpage"</code>.
   *
   * @see \MovLib\Presentation\AbstractPresenter::init()
   * @var string
   */
  public $id;

  /**
   * Active intl instance.
   *
   * @var \MovLib\Core\Intl
   */
  protected $intl;

  /**
   * Settings to pass along with this presentation.
   *
   * @var array
   */
  public $javascriptSettings = [];

  /**
   * Numeric array containing all JavaScript module names that should be loaded with this presentation.
   *
   * @var array
   */
  public $javascripts = [];

  /**
   * Active kernel instance.
   *
   * @var \MovLib\Core\Kernel
   */
  protected $kernel;

  /**
   * The page's translated routes.
   *
   * @var array
   */
  private $languageLinks;

  /**
   * The active log instance.
   *
   * @var \MovLib\Core\Log
   */
  protected $log;

  /**
   * Contains the namespace parts as array.
   *
   * @var array
   */
  protected $namespace;

  /**
   * The page's title used in the header.
   *
   * @var string
   */
  protected $pageTitle;

  /**
   * The type name of the schema of this presentation's content.
   *
   * @link http://schema.org/docs/schemas.html
   * @var string
   */
  protected $schemaType;

  /**
   * Active HTTP session instance.
   *
   * @var \MovLib\Core\HTTP\Session
   */
  protected $session;

  /**
   * Active HTTP request instance.
   *
   * @var \MovLib\Core\HTTP\Request
   */
  protected $request;

  /**
   * Active HTTP response instance.
   *
   * @var \MovLib\Core\HTTP\Response
   */
  protected $response;

  /**
   * The site's name.
   *
   * @var string
   */
  protected $siteName;

  /**
   * Additional stylesheets for this presentation.
   *
   * @var array
   */
  public $stylesheets = [];

  /**
   * The page's title.
   *
   * @var string
   */
  protected $title;


  // ------------------------------------------------------------------------------------------------------------------- Magic Methods


  /**
   * Instantiate new presenter object.
   *
   * @param \MovLib\Core\HTTP\DIContainerHTTP $diContainerHTTP
   *   HTTP dependency injection container.
   * @throws \Exception
   */
  final public function __construct(\MovLib\Core\HTTP\DIContainerHTTP $diContainerHTTP) {
    $this->diContainerHTTP = $diContainerHTTP;
    $this->config          = $diContainerHTTP->config;
    $this->fs              = $diContainerHTTP->fs;
    $this->intl            = $diContainerHTTP->intl;
    $this->kernel          = $diContainerHTTP->kernel;
    $this->log             = $diContainerHTTP->log;
    $this->request         = $diContainerHTTP->request;
    $this->response        = $diContainerHTTP->response;
    $this->session         = $diContainerHTTP->session;
  }


  // ------------------------------------------------------------------------------------------------------------------- Abstract Methods


  /**
   * Get the presentation.
   *
   * @return string
   *   The presentation.
   */
  abstract public function getContent();

  /**
   * Initialize the presentation.
   *
   * @return this
   */
  abstract public function init();


  // ------------------------------------------------------------------------------------------------------------------- Methods


  /**
   * Generate an internal link.
   *
   * This method should be used if you link to a page, but can't predict or know if this might be the page the user is
   * currently viewing. We don't want any links within a document to itself, but there are various reasons why you might
   * need that. Please use common sense. In general you should simply create the anchor element instead of calling this
   * method.
   *
   * @link http://www.w3.org/TR/html5/text-level-semantics.html#the-a-element
   * @link http://www.nngroup.com/articles/avoid-within-page-links/ Avoid Within-Page Links
   * @param string $route
   *   The original English route.
   * @param string $text
   *   The translated text that should appear as link on the page.
   * @param array $attributes [optional]
   *   Additional attributes that should be applied to the link element.
   * @param boolean $ignoreQuery [optional]
   *   Whether to ignore the query string while checking if the link should be marked active or not. Default is to
   *   ignore the query string.
   * @return string
   *   The internal link ready for print.
   */
  final public function a($route, $text, array $attributes = null, $ignoreQuery = true) {
    // We don't want any links to the current page (as per W3C recommendation). We also have to ensure that the anchors
    // aren't tabbed to, therefor we completely remove the href attribute. While we're at it we also remove the title
    // attribute because it doesn't add any value for screen readers without any target (plus the user is actually on
    // this very page).
    if ($route == $this->request->uri) {
      // Remove all attributes which aren't allowed on an anchor with empty href attribute.
      $unset = [ "download", "href", "hreflang", "rel", "target", "type" ];
      for ($i = 0; $i < 6; ++$i) {
        if (isset($attributes[$unset[$i]])) {
          unset($attributes[$unset[$i]]);
        }
      }
      // Ensure that this anchor is still "tabable".
      $attributes["tabindex"] = "0";
      $attributes["title"]    = $this->intl->t("You’re currently viewing this page.");
      $this->addClass("active", $attributes);
    }
    else {
      // We also have to mark the current anchor as active if the caller requested that we ignore the query part of the
      // URI (default behaviour of this method). We keep the title attribute in this case as it's a clickable link.
      if ($ignoreQuery === true && $route == $this->request->path) {
        $this->addClass("active", $attributes);
      }

      // Add the route to the anchor element.
      $attributes["href"] = $route{0} == "#" ? $route : $this->fs->urlEncodePath($route);
    }

    // Put it all together.
    return "<a{$this->expandTagAttributes($attributes)}>{$text}</a>";
  }

  /**
   * Add CSS class(es) to attributes array of an element.
   *
   * This method is useful if you're dealing with an element and you don't know if any CSS class(es) have already been
   * added to it's attributes array.
   *
   * @param string $class
   *   The CSS class(es) that should be added to the element's attributes array.
   * @param array $attributes [optional]
   *   The attributes array of the element to which the CSS class(es) should be added.
   * @return this
   */
  final public function addClass($class, array &$attributes = null) {
    $attributes["class"] = empty($attributes["class"]) ? $class : "{$attributes["class"]} {$class}";
    return $this;
  }

  /**
   * Collapse all kinds of whitespace characters to a single space.
   *
   * @param string $string
   *   The string to collapse.
   * @return string
   *   The collapsed string.
   */
  final public function collapseWhitespace($string) {
    return trim(preg_replace("/\s\s+/m", " ", preg_replace("/[\n\r\t\x{00}\x{0B}]+/m", " ", $string)));
  }

  /**
   * Expand the given attributes array to string.
   *
   * Many page elements aren't easily created by directly typing the string in the source code. Instead the have to go
   * through many staged of processing. We use associative arrays to allow all stages of processing to alter the
   * elemtns attributes before the element is finally printed. This method will expand these associative arrays to a
   * string that can be used to finally print the element.
   *
   * <b>Usage Example:</b>
   * <pre>$attributes = [ "class" => "css-class", "id" => "css-id" ];
   * echo "<div{$this->expandAttributes($attributes)}></div>";</pre>
   *
   * @param null|array $attributes
   *   Associative array containing the elements attributes. If no attributes are present (e.g. you're handling an
   *   object which sometimes has attributes but not always) an empty string will be returned.
   * @return string
   *   String representation of the attributes array, or empty string if no attributes are present.
   */
  final public function expandTagAttributes($attributes) {
    // Only expand if we have something to expand.
    if ($attributes) {
      // Local variables used to collect the expanded tag attributes.
      $expanded = null;

      // Go through all attributes and expand them.
      foreach ($attributes as $name => $value) {
        // Special handling of boolean attributes, only include them if they are true and do not include the value.
        if ($value === (boolean) $value) {
          $value && ($expanded .= " {$name}");
        }
        // Special handling of empty attributes (added to the attributes array without any key).
        elseif ($name === (integer) $name) {
          // @devStart
          // @codeCoverageIgnoreStart
          if (empty($value)) {
            throw new \LogicException("The value of an empty attribute (numeric key) cannot be empty");
          }
          // @codeCoverageIgnoreEnd
          // @devEnd
          $expanded .= " {$value}";
        }
        // All other attributes are treated equally, but only if they have a value. But beware that the alt attribute
        // is an exception to this rule.
        elseif ($name == "alt" || !empty($value)) {
          // @devStart
          // @codeCoverageIgnoreStart
          if (empty($name)) {
            throw new \LogicException("An attribute's name cannot be empty");
          }
          // @codeCoverageIgnoreEnd
          // @devEnd

          // Only output the language attribute if it differs from the current document language.
          if ($name == "lang") {
            $expanded .= $this->lang($value);
          }
          else {
            $expanded .= " {$name}='{$this->htmlEncode($value)}'";
          }
        }
      }

      return $expanded;
    }
  }

  /**
   * Format the given weblinks.
   *
   * @param array $weblinks
   *   The weblinks to format.
   * @return null|string
   *   The formatted weblinks, <code>NULL</code> if there are no weblinks to format.
   */
  final public function formatWeblinks(array $weblinks) {
    if (empty($weblinks)) {
      return;
    }
    $formatted = null;
    $c = count($weblinks);
    for ($i = 0; $i < $c; ++$i) {
      if ($formatted) {
        $formatted .= trim($this->intl->t("{0}, {1}"), "{}01");
      }
      $weblink = str_replace("www.", "", parse_url($weblinks[$i], PHP_URL_HOST));
      $formatted .= "<a href='{$weblinks[$i]}' target='_blank'>{$weblink}</a>";
    }
    return $formatted;
  }

  /**
   * Get the reference footer.
   *
   * @return string
   *   The reference footer.
   */
  public function getFooter() {
    $languageLinks = null;
    $teamOffset = " o4";

    if ($this->languageLinks) {
      $teamOffset = null;
      list($routeKey, $args, $plural, $queries) = $this->languageLinks;
      $languages = $this->intl->getTranslations("languages");
      // @devStart
      // @codeCoverageIgnoreStart
      if (empty($languages)) {
        throw new \LogicException("Language translations are empty, please execute `movinstall seed-languages`.");
      }
      // @codeCoverageIgnoreEnd
      // @devEnd

      // Format the current language's link right away.
      $languageLinks[$languages[$this->intl->languageCode]->name] =
        "<a class='active' href='#' title='{$this->intl->t("You’re currently viewing this page.")}'>" .
          $languages[$this->intl->languageCode]->name .
        "</a>"
      ;

      // Remove the current language from the available locales.
      $locales = $this->intl->systemLocales;
      unset($locales[$this->intl->languageCode]);

      // Translate the rest of the available languages.
      foreach ($locales as $code => $locale) {
        $route = $plural ? $this->intl->rp($routeKey, $args, $locale) : $this->intl->r($routeKey, $args, $locale);
        if ($queries) {
          $query = null;
          foreach ($queries as $key => $value) {
            if ($query) {
              $query .= "&amp;";
            }
            $query .= "{$this->intl->r($key)}={$value}";
          }
          $route .= "?{$query}";
        }
        $languageLinks[$languages[$code]->name] =
          "<a href='//{$code}.{$this->config->hostname}{$route}' lang='{$code}'>{$this->intl->t(
            "{0} ({1})",
            [ $languages[$code]->name, $languages[$code]->native ]
          )}</a>"
        ;
      }

      // The language links shall be sorted in the client's native language.
      (new Collator($this->intl->locale))->ksort($languageLinks);

      // Put the section together.
      $languageLinks =
        "<section class='last s s4'>" .
          "<div class='popup'>" .
            "<div class='content'>" .
              "<h2>{$this->intl->t("Choose your language")}</h2>" .
              "<small>{$this->intl->t(
                "Is your language missing in our list? {0}Help us translate {sitename}.{1}",
                [ "<a href='{$this->intl->r("/localize")}'>", "</a>", "sitename" => $this->config->sitename ]
              )}</small>" .
              implode(" ", $languageLinks) .
            "</div>" .
            "<a class='ico ico-languages' id='f-language' tabindex='0'>{$this->intl->t("Language")}: {$languages[$this->intl->languageCode]->name}</a>" .
          "</div>" .
        "</section>"
      ;
    }

    return
      "<footer id='f' role='contentinfo'>" .
        "<h1 class='vh'>{$this->intl->t("Infos all around {sitename}", [ "sitename" => $this->config->sitename ])}</h1>" .
        "<div class='c'><div class='r'>" .
          "<section class='s s12'>" .
            "<h3 class='vh'>{$this->intl->t("Copyright and licensing information")}</h3>" .
            "<p id='f-copyright'><span class='ico ico-cc'></span> <span class='ico ico-cc-zero'></span> {$this->intl->t(
              "Database data is available under the {0}Creative Commons — CC0 1.0 Universal{1} license.",
              [ "<a href='https://creativecommons.org/publicdomain/zero/1.0/deed.{$this->intl->languageCode}' rel='license'>", "</a>" ]
            )}<br>{$this->intl->t(
              "Additional terms may apply for third-party content, please refer to any license or copyright information that is additionaly stated."
            )}</p>" .
          "</section>" .
          "<section id='f-logos' class='s s12 tac'>" .
            "<h3 class='vh'>{$this->intl->t("Sponsors and external resources")}</h3>" .
            "<a class='no-link' href='http://www.fh-salzburg.ac.at/' target='_blank'>" .
              "<img alt='Fachhochschule Salzburg' height='30' src='{$this->fs->getExternalURL("asset://img/footer/fachhochschule-salzburg.svg")}' width='48'>" .
            "</a>" .
            "<a class='no-link' href='https://github.com/MovLib' target='_blank'>" .
              "<img alt='GitHub' height='30' src='{$this->fs->getExternalURL("asset://img/footer/github.svg")}' width='48'>" .
            "</a>" .
          "</section>" .
          $languageLinks .
          "<section id='f-team' class='last{$teamOffset} s s4 tac'><h3>{$this->a($this->intl->r("/team"), $this->intl->t("Made with {love} in Austria", [
            "love" => "<span class='ico ico-heart'></span><span class='vh'>{$this->intl->t("love")}</span>"
          ]))}</h3></section>" .
          "<section class='last s s4 tar'>" .
            "<h3 class='vh'>{$this->intl->t("Legal Links")}</h3>" .
            "{$this->a($this->intl->r("/impressum"), $this->intl->t("Impressum"))} · " .
            "{$this->a($this->intl->r("/privacy-policy"), $this->intl->t("Privacy Policy"))} · " .
            "{$this->a($this->intl->r("/terms-of-use"), $this->intl->t("Terms of Use"))}" .
          "</section>" .
        "</div>" .
      "</div></footer>"
    ;
  }

  /**
   * Get the reference header, including logo, navigations and search form.
   *
   * @return string
   *   The reference header.
   */
  public function getHeader() {
    $exploreNavigation =
      "<ul class='o1 sm2 no-list'>" .
        "<li>{$this->a($this->intl->rp("/movies"), $this->intl->t("Movies"), [ "class" => "ico ico-movie" ])}</li>" .
        "<li>{$this->a($this->intl->rp("/series"), $this->intl->t("Series"), [ "class" => "ico ico-series" ])}</li>" .
        "<li>{$this->a($this->intl->rp("/releases"), $this->intl->t("Releases"), [ "class" => "ico ico-release" ])}</li>" .
        "<li>{$this->a($this->intl->rp("/persons"), $this->intl->t("Persons"), [ "class" => "ico ico-person" ])}</li>" .
        "<li>{$this->a($this->intl->rp("/companies"), $this->intl->t("Companies"), [ "class" => "ico ico-company" ])}</li>" .
        "<li>{$this->a($this->intl->rp("/awards"), $this->intl->t("Awards"), [ "class" => "ico ico-award" ])}</li>" .
        "<li>{$this->a($this->intl->rp("/events"), $this->intl->t("Events"), [ "class" => "ico ico-event" ])}</li>" .
        "<li>{$this->a($this->intl->rp("/genres"), $this->intl->t("Genres"), [ "class" => "ico ico-genre" ])}</li>" .
        "<li>{$this->a($this->intl->rp("/jobs"), $this->intl->t("Jobs"), [ "class" => "ico ico-job" ])}</li>" .
        "<li class='separator'>{$this->a($this->intl->r("/help"), $this->intl->t("Help"), [ "class" => "ico ico-help" ])}</li>" .
      "</ul>"
    ;

    $notImplemented = new Alert("coming soon!");
    $marketplaceNavigation =
      "<ul class='o1 sm2 no-list'>" .
        "<li>{$notImplemented}</li>" .
      "</ul>"
    ;

    $communityNavigation =
      "<ul class='o1 sm2 no-list'>" .
        "<li>{$this->a($this->intl->rp("/users"), $this->intl->t("Explore Users"), [ "class" => "ico ico-person" ])}</li>" .
        "<li class='separator'>{$this->a($this->intl->rp("/deletion-requests"), $this->intl->t("Deletion Requests"), [ "class" => "ico ico-delete" ])}</li>" .
      "</ul>"
    ;

    if ($this->session->isAuthenticated === true) {
      $userIcon = "<div class='clicker ico ico-settings authenticated'><span class='badge'>2</span></div>";
      $userNavigation =
        "<ul class='o1 sm2 no-list'>" .
          "<li>{$this->a($this->intl->r("/profile/messages"), $this->intl->t("Messages"), [ "class" => "ico ico-email" ])}</li>" .
          "<li>{$this->a($this->intl->r("/profile/collection"), $this->intl->t("Collection"), [ "class" => "ico ico-release" ])}</li>" .
          "<li>{$this->a($this->intl->r("/profile/wantlist"), $this->intl->t("Wantlist"), [ "class" => "ico ico-heart" ])}</li>" .
          "<li>{$this->a($this->intl->r("/profile/lists"), $this->intl->t("Lists"), [ "class" => "ico ico-ul" ])}</li>" .
          "<li>{$this->a($this->intl->r("/profile/watchlist"), $this->intl->t("Watchlist"), [ "class" => "ico ico-view" ])}</li>" .
          "<li class='separator'>{$this->a($this->intl->r("/profile"), $this->intl->t("Profile"), [ "class" => "ico ico-user" ])}</li>" .
          "<li>{$this->a($this->intl->r("/profile/account-settings"), $this->intl->t("Settings"), [ "class" => "ico ico-settings" ])}</li>" .
          "<li class='separator name'>{$this->session->userName}</li>" .
          "<li>{$this->a($this->intl->r("/profile/sign-out"), $this->intl->t("Sign Out"), [ "class" => "danger" ])}</li>" .
        "</ul>";
        //$this->getImage($this->session->userAvatar, $this->intl->r("/profile"));
    }
    else {
      $userIcon = "<div class='btn btn-inverse clicker ico ico-user-add'></div>";
      $userNavigation =
        "<ul class='o1 sm2 no-list'>" .
          "<li>{$this->a($this->intl->r("/profile/sign-in"), $this->intl->t("Sign In"))}</li>" .
          "<li>{$this->a($this->intl->r("/profile/join"), $this->intl->t("Join"))}</li>" .
          "<li>{$this->a($this->intl->r("/profile/reset-password"), $this->intl->t("Forgot Password"))}</li>" .
        "</ul>"
      ;
    }

    $searchQuery = $this->request->filterInput(INPUT_GET, "q", FILTER_SANITIZE_STRING, FILTER_REQUIRE_SCALAR | FILTER_FLAG_STRIP_LOW);

    return
      // No skip-to-content link! We have proper headings, semantic HTML5 elements and proper ARIA landmarks!
      "<header id='h' role='banner'><div class='c'><div class='r'>" .
        // Only one <h1> per page? No problem according to Google https://www.youtube.com/watch?v=GIn5qJKU8VM plus HTML5
        // wants us to use multiple <h1>s for multiple sections, so here we go. The header is always the MovLib header.
        "<h1 class='s s3'>{$this->a(
          "/",
          "<img alt='' height='42' src='{$this->fs->getExternalURL("asset://img/logo/vector.svg")}' width='42'> {$this->config->sitename}",
          [ "id" => "l", "title" => $this->intl->t("Go back to the home page.") ]
        )}</h1>" .
        "<div class='s s9'>" .
          "<nav aria-expanded='false' aria-haspopup='true' class='expander main-nav' id='explore-nav' role='navigation' tabindex='0'>" .
            "<h2 class='visible clicker'>{$this->intl->t("Explore")}</h2>" .
            "<div class='concealed s sm3'>" .
              $exploreNavigation .
            "</div>" .
          "</nav>" .
          "<nav aria-expanded='false' aria-haspopup='true' class='expander main-nav' id='marketplace-nav' role='navigation' tabindex='0'>" .
            "<h2 class='visible clicker'>{$this->intl->t("Marketplace")}</h2>" .
            "<div class='concealed s sm3'>" .
              $marketplaceNavigation .
            "</div>" .
          "</nav>" .
          "<nav aria-expanded='false' aria-haspopup='true' class='expander main-nav' id='community-nav' role='navigation' tabindex='0'>" .
            "<h2 class='visible clicker'>{$this->intl->t("Community")}</h2>" .
            "<div class='concealed s sm3'>" .
              $communityNavigation .
            "</div>" .
          "</nav>" .
          "<form action='{$this->intl->r("/search")}' class='s' id='s' method='get' role='search'>" .
            "<button class='ico ico-search' tabindex='2' type='submit'><span class='vh'>{$this->intl->t(
              "Start searching for the entered keyword."
            )}</span></button>" .
            "<input name='q' required tabindex='1' title='{$this->intl->t(
              "Enter the search term you wish to search for and hit enter."
            )}' type='search' value='{$searchQuery}'>" .
          "</form>" .
          "<nav aria-expanded='false' aria-haspopup='true' class='expander main-nav' id='user-nav' role='navigation' tabindex='0'>" .
            "<h2 class='vh'>{$this->intl->t("User Navigation")}</h2>{$userIcon}" .
            "<div class='concealed s sm3'>{$userNavigation}</div>" .
          "</nav>" .
        "</div>" .
      "</div></div></header>"
    ;
  }

  /**
   * Get an image.
   *
   * @param \MovLib\Data\Image\ImageStyle $imageStyle
   *   The image style to get the image for.
   * @param array $attributes [optional]
   *   Additional attributes that should be applied to the image tag, defaults to <code>[]</code>.
   * @param boolean|string $route [optional]
   *   Whether to use the default route from the image style for linking (<code>TRUE</code> and default) or not
   *   <code>FALSE</code> or an arbitrary route.
   * @param array $routeAttributes [optional]
   *   Additional attributes that should be applied to the wrapping anchor element if <var>$route</var> is set to
   *   <code>TRUE</code> or an arbitrary route is given.
   * @return string
   *   The image.
   */
  final public function img(\MovLib\Data\Image\ImageStyle $imageStyle, array $attributes = [], $route = true, array $routeAttributes = null) {
    // The alt attribute is mandatory on image elements.
    if (empty($attributes["alt"])) {
      $attributes["alt"] = $imageStyle->alt;
    }

    // Add CSS class for additional styling and be sure to remove any structured data from the image tag if this is a
    // placeholder image we're going to display.
    if ($imageStyle->placeholder) {
      $this->addClass("placeholder", $attributes);

      if (isset($attributes["property"])) {
        unset($attributes["property"]);
      }
    }

    // Extract the necessary image tag attributes from the image style.
    $attributes["src"]    = $imageStyle->url;
    $attributes["width"]  = $imageStyle->width;
    $attributes["height"] = $imageStyle->height;
    $image                = "<img{$this->expandTagAttributes($attributes)}>";

    if ($route !== false) {
      // @devStart
      // @codeCoverageIgnoreStart
      assert(
        empty($attributes["property"]),
        "Don't set a property and link an image, this won't be interpreted correctly by structured data tools!"
      );
      // @codeCoverageIgnoreEnd
      // @devEnd
      if ($route === true) {
        $route = $imageStyle->route;
      }
      $routeAttributes["href"] = $route;
      $this->addClass("no-link", $routeAttributes);
      $image = "<a{$this->expandTagAttributes($routeAttributes)}>{$image}</a>";
    }

    return $image;
  }

  /**
   * Get the head title.
   *
   * Formats the title of this page for the <code><title></code>-element. A special separator string is used before
   * appending the sitename.
   *
   * @return string
   *   The head title.
   */
  protected function getHeadTitle() {
    return $this->intl->t("{page_title} — {sitename}", [ "page_title" => $this->title, "sitename" => $this->config->sitename ]);
  }

  /**
   * Get string representation of the current page.
   *
   * Any HTML page needs the HTML header and the wrapping <code><body></code>-element. Therefor the most basic variation
   * is to only print exactly these elements.
   *
   * Short note on why we are using a method called <code>getPresentation()</code> and not the platform provided
   * <code>getPresentation()</code> magic method: any <code>getPresentation()</code>-method can't throw an execption, which is a
   * huge problem in the way we are dealing with errors. Everything throws an exception if something goes wrong and if
   * something goes wrong during the rendering process one wouldn't get any stacktrace, instead a generic
   * <i>getPresentation() must not throw an exception</i> message would be displayed (fatal error of course, so you get
   * nothing).
   *
   * @param string $content
   *   The presentation's content, usually from {@see AbstractPresenter::getContent()} but exception may call other
   *   methods to provide the content.
   * @return string
   */
  public function getPresentation($content) {
    // Allow the presentation to alter presentation in getContent() method.
    $content = $this->getMainContent($content);

    // Build a link for each stylesheet of this page.
    $stylesheets = null;
    $i = count($this->stylesheets);
    while ($i--) {
      $stylesheets .= "<link href='{$this->fs->getExternalURL("asset://css/module/{$this->stylesheets[$i]}.css")}' rel='stylesheet'>";
    }

    // Apply additional CSS class if the current request is made from a signed in user.
    if ($this->session->isAuthenticated === true) {
      $this->bodyClasses .= " authenticated";
    }

    // Build the JavaScript settings JSON.
    $this->javascriptSettings["hostnameStatic"] = $this->config->hostnameStatic;
    $c = count($this->javascripts);
    for ($i = 0; $i < $c; ++$i) {
      $this->javascriptSettings["modules"][$this->javascripts[$i]] = $this->fs->getExternalURL("asset://js/module/{$this->javascripts[$i]}.js");
    }
    $jsSettings = json_encode($this->javascriptSettings, JSON_UNESCAPED_UNICODE);

    $htmlAttr = " dir='{$this->intl->direction}' id='nojs' lang='{$this->intl->languageCode}' prefix='og: http://ogp.me/ns#'";
    $logo256  = $this->fs->getExternalURL("asset://img/logo/256.png");
    $title    = $this->getHeadTitle();

    return
      "<!doctype html>" .
      "<!--[if IE 9 ]><html class='ie9'{$htmlAttr}><![endif]-->" .
      "<!--[if (gt IE 9)|!(IE)]><!--><html{$htmlAttr}><!--<![endif]-->" .
      "<head>" .
        "<title>{$title}</title>" .
        // Include the global styles and any presentation specific ones.
        "<link href='{$this->fs->getExternalURL("asset://css/MovLib.css")}' rel='stylesheet'>{$stylesheets}" .
        // Yes, we could create these in a loop, but why should we implement a loop for static data? To be honest, I
        // generated it with a loop and simply copied the output here.
        "<link href='{$this->fs->getExternalURL("asset://img/logo/vector.svg")}' rel='icon' type='image/svg+xml'>" .
        "<link href='{$logo256}' rel='icon' sizes='256x256' type='image/png'>" .
        "<link href='{$this->fs->getExternalURL("asset://img/logo/128.png")}' rel='icon' sizes='128x128' type='image/png'>" .
        "<link href='{$this->fs->getExternalURL("asset://img/logo/64.png")}' rel='icon' sizes='64x64' type='image/png'>" .
        "<link href='{$this->fs->getExternalURL("asset://img/logo/32.png")}' rel='icon' sizes='32x32' type='image/png'>" .
        "<link href='{$this->fs->getExternalURL("asset://img/logo/24.png")}' rel='icon' sizes='24x24' type='image/png'>" .
        "<link href='{$this->fs->getExternalURL("asset://img/logo/16.png")}' rel='icon' sizes='16x16' type='image/png'>" .
        "<link href='https://plus.google.com/115387876584819891316?rel=publisher' property='publisher'>" .
        "<meta property='og:description' content='{$this->intl->t("The free online movie database that anyone can edit.")}'>" .
        "<meta property='og:image' content='{$this->request->scheme}:{$logo256}'>" .
        "<meta property='og:site_name' content='{$this->config->sitename}'>" .
        "<meta property='og:title' content='{$title}'>" .
        "<meta property='og:type' content='website'>" .
        "<meta property='og:url' content='{$this->request->scheme}://{$this->config->hostname}{$this->request->uri}'>" .
        "<meta name='application-name' content='{$this->config->sitename}'>" .
        "<meta name='msapplication-tooltip' content='{$this->config->slogan}'>" .
        "<meta name='msapplication-starturl' content='{$this->request->scheme}://{$this->config->hostname}/'>" .
        "<meta name='msapplication-navbutton-color' content='#ffffff'>" .
        // @todo Add opensearch tag (rel="search").
        $this->headElements .
      "</head>" .
      "<body id='{$this->id}' class='{$this->bodyClasses}' vocab='http://schema.org/'>" .
        "{$this->getHeader()}{$content}{$this->getFooter()}" .
        "<script id='jss' type='application/json'>{$jsSettings}</script>" .
        "<script async src='{$this->fs->getExternalURL("asset://js/MovLib.js")}'></script>"
    ;
  }

  /**
   * Get the raw HTML string.
   *
   * @param string $text
   *   The encoded HTML string that should be decoded.
   * @return string
   *   The raw HTML string.
   */
  final public function htmlDecode($text) {
    if (empty($text)) {
      // @devStart
      // @codeCoverageIgnoreStart
      $this->log->debug("You should avoid passing empty texts to htmlDecode");
      // @codeCoverageIgnoreEnd
      // @devEnd
      return $text;
    }
    return htmlspecialchars_decode($text, ENT_QUOTES | ENT_HTML5);
  }

  /**
   * Decodes all HTML entities including numerical ones to regular UTF-8 bytes.
   *
   * Double-escaped entities will only be decoded once (<code>"&amp;lt;"</code> becomes <code>"&lt;"</code>, not
   * <code>"<"</code>). Be careful when using this function, as it will revert previous sanitization efforts
   * (<code>"&lt;script&gt;"</code> will become <code>"<script>"</code>).
   *
   * @param string $text
   *   The text to decode entities in.
   * @return string
   *   <var>$text</var> with all HTML entities decoded.
   */
  final public function htmlDecodeEntities($text) {
    if (empty($text)) {
      // @devStart
      // @codeCoverageIgnoreStart
      $this->log->debug("You should avoid passing empty texts to htmlDecodeEntities");
      // @codeCoverageIgnoreEnd
      // @devEnd
      return $text;
    }
    return html_entity_decode($text, ENT_QUOTES | ENT_HTML5);
  }

  /**
   * Encode special characters in a plain-text string for display as HTML.
   *
   * <b>Always</b> use this method before displaying any plain-text string to the user.
   *
   * @param string $text
   *   The plain-text string to process.
   * @return string
   *   <var>$text</var> with encoded HTML special characters.
   */
  final public function htmlEncode($text) {
    if (empty($text)) {
      // @devStart
      // @codeCoverageIgnoreStart
      $this->log->debug("You should avoid passing empty texts to htmlEncode");
      // @codeCoverageIgnoreEnd
      // @devEnd
      return $text;
    }
    return htmlspecialchars($text, ENT_QUOTES | ENT_HTML5);
  }

  /**
   * Transform and kind of string to HTML safe ID.
   *
   * @param string $string
   *   The string to convert.
   * @return string
   *   The HTML safe ID.
   */
  final public function htmlString2ID($string) {
    if (is_numeric($string{0})) {
      $string = "n{$string}";
    }
    return mb_strtolower(preg_replace("/[^\d\w-_]+/", "-", $string));
  }

  /**
   * Get the wrapped content, including heading.
   *
   * @param string $content
   *   The presentation's content.
   * @return string
   *   The presentation's content wrapped with the main tag and header.
   */
  public function getMainContent($content) {
    // Allow the presentation to set a heading that includes HTML mark-up.
    $title = $this->pageTitle ?: $this->title;

    // Add the current page to the breadcrumb.
    if ($this->breadcrumb) {
      $this->breadcrumb->menuitems[] = [ $this->request->path, $this->breadcrumbTitle ?: $this->title ];
    }

    // The schema for the complete page content.
    $schema = null;
    if ($this->schemaType) {
      $schema = " typeof='{$this->schemaType}'";
    }

    // The schema property of the heading.
    $headingprop = null;
    if ($this->headingSchemaProperty) {
      $headingprop = " property='{$this->headingSchemaProperty}'";
    }

    $noscript = new Alert(
      $this->intl->t("Please activate JavaScript in your browser to experience our website with all its features."),
      $this->intl->t("JavaScript Disabled")
    );

    // Render the page's main element (note that we still include the ARIA role "main" at this point because not all
    // user agents support the new HTML5 element yet).
    return
      "<main id='m' role='main'{$schema}>" .
        "<header id='header'>" .
          "<div class='c'>{$this->breadcrumb}{$this->headingBefore}<h1{$headingprop}>{$title}</h1>{$this->headingAfter}</div>" .
          "<noscript>{$noscript}</noscript>{$this->alerts}" .
        "</header>" .
        "{$this->contentBefore}{$content}{$this->contentAfter}" .
      "</main>"
    ;
  }

  /**
   * Initialize the page's breadcrumb.
   *
   * @param array $breadcrumbs [optional]
   *   Numeric array containing additional breadcrumbs to put between home and the current page.
   * @return this
   */
  protected function initBreadcrumb(array $breadcrumbs = []) {
    // Initialize the breadcrumb navigation and always include the home page's link and the currently displayed page.
    $trail = [[ "/", $this->intl->t("Home"), [ "title" => $this->intl->t("Go back to the home page.") ] ]];

    // Put the breadcrumb's trails together for the navigation.
    $c = count($breadcrumbs);
    for ($i = 0; $i < $c; ++$i) {
      // 0 => route
      // 1 => linktext
      // 2 => attributes
      if (mb_strlen($breadcrumbs[$i][1]) > 25) {
        $breadcrumbs[$i][2]["title"] = $breadcrumbs[$i][1];
        $breadcrumbs[$i][1]          = mb_strimwidth($breadcrumbs[$i][1], 0, 25, $this->intl->t("…"));
      }
      $trail[] = $breadcrumbs[$i];
    }

    // Create the actual navigation with the trail we just built.
    $this->breadcrumb = new Navigation($this, $this->intl->t("You are here: "), $trail, [ "class" => "c", "id" => "b" ]);
    $this->breadcrumb->glue = " › ";

    return $this;
  }

  /**
   * Initialize the language links for the current page.
   *
   * @param string $route
   *   The key of this route.
   * @param mixed $args [optional]
   *   The route arguments, defaults to no arguments.
   * @param boolean $plural [optional]
   *   Set to <code>TRUE</code> if the current page has a plural route, defaults to <code>FALSE</code>.
   * @param array $queries [optional]
   *   Array of key value pairs that should be appended as query string to the route. Note that the keys have to be in
   *   the default locale because they are translated like everything else.
   * @return this
   */
  final protected function initLanguageLinks($route, $args = null, $plural = false, array $queries = null) {
    $this->languageLinks = [ $route, $args, $plural, $queries ];
    return $this;
  }

  /**
   * Initialize the page.
   *
   * @param string $title
   *   The already translated title of this page.
   * @return this
   */
  final protected function initPage($title) {
    // The substr() removes the \MovLib\Presentation\ part!
    $className         = strtolower(substr(get_class($this), 20));
    $this->namespace   = explode("\\", $className);
    array_pop($this->namespace); // The last element is the name of the class and not part of the namespace.
    $this->bodyClasses = strtr($className, "\\", " ");
    $this->id          = strtr($className, "\\", "-");
    $this->title       = $title;
    return $this;
  }

  /**
   * Get global <code>lang</code> attribute for any HTML tag if language differs from current display language.
   *
   * @param string $lang
   *   The ISO alpha-2 language code of the entity you want to display and have compared to the current language.
   * @return null|string
   *   <code>NULL</code> if given <var>$lang</var> matches current display language, otherwise the global <code>lang</code>
   *   attribute ready for print (e.g. <code>" lang='de'"</code>).
   */
  final public function lang($lang) {
    if ($lang != $this->intl->languageCode) {
      return " lang='{$this->htmlEncode($lang)}'";
    }
  }

  /**
   * Add next route to <code><head></code>.
   *
   * @param string $route
   *   The route that's next.
   * @return this
   */
  final protected function next($route) {
    $this->headElements .= "<link rel='next' href='{$route}'>";
    return $this;
  }

  /**
   * Normalize all kinds of line feeds to *NIX style (real LF).
   *
   * @link http://stackoverflow.com/a/7836692/1251219 How to replace different newline styles in PHP the smartest way?
   * @param string $text
   *   The text to normalize.
   * @return string
   *   The normalized text.
   */
  final public function normalizeLineFeeds($text) {
    // @devStart
    // @codeCoverageIgnoreStart
    if (empty($text) || !is_string($text)) {
      throw new \InvalidArgumentException("\$text cannot be empty and must be of type string.");
    }
    // @codeCoverageIgnoreEnd
    // @devEnd
    return preg_replace("/\R/u", "\n", $text);
  }

  /**
   * Formats text for emphasized display in a placeholder inside a sentence.
   *
   * @param string $text
   *   The text to format (plain-text).
   * @return string
   *   The formatted text (html).
   */
  final public function placeholder($text) {
    // @devStart
    // @codeCoverageIgnoreStart
    if (empty($text) || !is_string($text)) {
      throw new \InvalidArgumentException("\$text cannot be empty and must be of type string.");
    }
    // @codeCoverageIgnoreEnd
    // @devEnd
    return "<em class='placeholder'>{$this->htmlEncode($text)}</em>";
  }

  /**
   * Add prefetch/prerender route to <code><head></code>.
   *
   * @param string $route
   *   The route to prefetch/prerender.
   * @return this
   */
  final protected function prefetch($route) {
    $this->headElements .= "<link rel='prefetch' href='{$route}'><link rel='prerender' href='{$route}'>";
    return $this;
  }

  /**
   * Add previous route to <code><head></code>.
   *
   * @param string $route
   *   The route that's previous.
   * @return this
   */
  final protected function prev($route) {
    $this->headElements .= "<link rel='prev' href='{$route}'>";
    return $this;
  }

}
